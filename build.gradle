plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'war'
}

group = 'kr.co.goms.web'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
       exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
	mavenCentral()
}


ext {
	set('springCloudVersion', "2023.0.2")
}

springBoot{
	mainClass = "kr.co.goms.web.oss.OssApplicaton"
}

if(project.hasProperty("prod")){
	apply from: "gradle/profile_prod.gradle"
}else if(project.hasProperty("stg")){
	apply from: "gradle/profile_stg.gradle"
}else if(project.hasProperty("dev")){
	apply from: "gradle/profile_dev.gradle"
}else{
	apply from: "gradle/profile_local.gradle"
}

/*
pmd {
	consoleOutput = true
	toolVersion = "6.21.0"
	rulesMinimumPriority = 1
	ruleSetFiles = files("EgovInspectionRles_kro-3.8.xml")
	reportsDir = file("${buildDir}/pmd-output")
	ignoreFailures = true	//분석결과 예외가 발생하면 빌드실패 발생시키는 것을 제외함
}

pmdMain{
	reports{
		xml.destination = file("${pmd.reportsDir}/pmd-report.xml");
	}
}
*/


dependencies {
  	implementation('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch:3.3.1'
	
	implementation 'org.springframework.security:spring-security-data'
	implementation 'org.springframework.security:spring-security-messaging'
	
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	implementation 'org.springframework.cloud:spring-cloud-starter-zookeeper-config'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	
	implementation 'org.mybatis:mybatis:3.5.10' 
	
	//HikariCP & hibernate
	implementation 'com.zaxxer:HikariCP'
	implementation 'org.apache.commons:commons-lang3'
	implementation 'javax.cache:cache-api'
	implementation 'org.hibernate:hibernate-core:6.5.2.Final'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

	//log4j2
	implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'
		
	//swagger-ui
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	
	//hazelcast
	implementation 'com.hazelcast:hazelcast'
		
	//lombok AND mapstruct
	implementation 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'	
	
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	
	//token
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'	
	
	implementation 'org.springframework.security:spring-security-oauth2-jose'
	
	//exception
	implementation 'org.zalando:problem-spring-web-starter:0.27.0'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'mysql:mysql-connector-java:8.0.25'
	
	
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
	
	providedRuntime 'jakarta.servlet:jakarta.servlet-api:5.0.0' // Adjust the version if needed
		
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
}


bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

task cleanResource(type: Delete){
	delete "build/resources"
}
